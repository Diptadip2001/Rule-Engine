{"version":3,"sources":["rgb.ts","rule.tsx","rule-group.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colorLuminance","hex","lum","String","replace","length","c","i","rgb","parseInt","substr","Math","round","min","max","toString","Rule","path","rule","onParamChange","className","value","field","onChange","e","target","op","onClick","EMPTY_RULE","RuleGroup","data","level","action","onConditionChange","condition","Object","keys","rules","style","backgroundColor","href","and","map","r","childCondition","pathindex","includes","key","initialData","or","App","useState","setData","obj","isSet","mPath","startsWith","slice","mData","cloneDeep","set","unset","prune","current","forOwn","isNull","isNaN","isString","isEmpty","isObject","isArray","pull","undefined","pruneEmpty","prevKey","newKey","culprit","get","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d08c4a75.chunk.js","sourcesContent":["export const colorLuminance = (hex: any, lum: any) => {\n    let rem = lum - 1;\n    lum = -(rem / 25);\n    // validate hex string\n    hex = String(hex).replace(/[^0-9a-f]/gi, \"\");\n    if (hex.length < 6) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    lum = lum || 0;\n  \n    // convert to decimal and change luminosity\n    var rgb = \"#\",\n      c,\n      i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i * 2, 2), 16);\n      c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n      rgb += (\"00\" + c).substr(c.length);\n    }\n  \n    return rgb;\n}","import React from \"react\";\nimport { IRule } from \"./type\";\n\ntype Props = {\n  rule: IRule;\n  path: string;\n  onParamChange: (path: string, data: string, isUpdate: boolean) => void;  \n}\n\nconst Rule = ({ path, rule, onParamChange }: Props) => (\n  <li className=\"rule\">\n   <div className=\"rule-body\">\n        <input\n            value={rule.field}\n            onChange={(e: any) => onParamChange(`${path}.field`, e.target.value, true)}\n        />\n        <select\n            value={rule.op}\n            onChange={(e: any) => onParamChange(`${path}.op`, e.target.value, true)}\n        >\n            <option value=\"is\">is</option>\n            <option value=\"not-is\">not is</option>\n            <option value=\"greater\">greater</option>\n            <option value=\"less\">less</option>\n            <option value=\"has\">has</option>\n            <option value=\"contains\">contains</option>\n        </select>\n        <input\n            value={rule.value}\n            onChange={(e: any) => onParamChange(`${path}.value`, e.target.value, true)}\n        />\n        <button onClick={() => onParamChange(path, '', false)}>X</button>\n    </div>\n  </li>\n);\n\nexport default Rule;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport { colorLuminance } from \"./rgb\";\nimport Rule from \"./rule\";\nimport { IRule } from \"./type\";\n\nconst BASE_SHADE = \"F7F7F7\";\nconst EMPTY_RULE: IRule = {\n  field: '',\n  op: '',\n  value: '',\n};\n\nconst RuleGroup = ({ data, level, path, action, onConditionChange }: any) => {\n  const condition = Object.keys(data)[0];\n  const rules = data[condition];\n\n  return (\n    <li className={level > 1 ? 'rule' : ''}>\n      <ul\n        style={{\n          backgroundColor: colorLuminance(\n            BASE_SHADE,\n            parseInt(level, 10)\n          )\n        }}\n      >\n        <li>\n          <a href=\"#\">\n            <div className=\"add-rule-options\">\n                <select\n                  value={condition}\n                  onChange={(e: any) => onConditionChange(path, condition, e.target.value)}\n                >\n                    <option value=\"and\">And</option>\n                    <option value=\"or\">Or</option>\n                </select>\n                <button onClick={() => action(`${path}.${condition}[${rules.length}]`, EMPTY_RULE, true)}>+ rule</button>\n                <button onClick={() => action(`${path}.${condition}[${rules.length}]`, { and: [EMPTY_RULE]}, true)}>+ rule group</button>\n                <button\n                  onClick={() => action(path, '', false)}>\n                  delete\n                </button>\n            </div>\n          </a>\n          <ul>\n            {rules.map((r: any, i: number) => {\n                const childCondition = Object.keys(r)[0];\n                let pathindex = path ? `${path}.${condition}[${i}]` : `${condition}[${i}]`;\n                return (['and', 'or'].includes(childCondition)) ? (\n                  <RuleGroup\n                    data={r}\n                    key={i}\n                    path={pathindex}\n                    action={action}\n                    onConditionChange={onConditionChange}\n                    level={level + 1}\n                  />\n                ) : (\n                  <Rule\n                    rule={r}\n                    key={i}\n                    path={pathindex}\n                    onParamChange={action}\n                  />\n                );\n              })}\n          </ul>\n        </li>\n      </ul>\n    </li>\n  );\n}\n\nexport default RuleGroup;","import React, { useState } from 'react';\nimport './App.css';\nimport RuleGroup from './rule-group';\nimport {\n  get, set, unset,\n  forOwn, isUndefined,\n  isNull, isNaN,\n  isString, isEmpty, isObject, isArray, pull, cloneDeep\n} from 'lodash';\n\nconst initialData = {\n  and: [\n    { field: 'fname', op: 'is', value: 'sas'},\n    { field: 'fname', op: 'less', value: 'bob'},\n    { or: [\n      { field: 'fname', op: 'not-is', value: 'bob'},\n      { field: 'fname', op: 'greater', value: 'bob'},\n      { field: 'fname', op: 'greater', value: 'bob'},\n    ]}\n  ]\n}\n\nconst pruneEmpty = (obj: any) => {\n  return function prune(current) {\n    forOwn(current, function (value, key) {\n      if (isNull(value) \n      || isNaN(value) ||\n        (isString(value) && isEmpty(value)) ||\n        (isObject(value) && isEmpty(prune(value)))\n        ) {\n\n        delete current[key];\n      }\n    });\n    // remove any leftover undefined values from the delete \n    // operation on an array\n    if (isArray(current)) pull(current, undefined);\n\n    return current;\n\n  }(cloneDeep(obj));  // Do not modify the original object, create a clone instead\n}\n\nfunction App() {\n  const [data, setData] = useState(initialData);\n\n  const changeKey = (path: string, prevKey: string, newKey: string) => {\n    const culprit = path ? get(data, path, {}): data;\n    culprit[newKey] = culprit[prevKey];\n    delete culprit[prevKey];\n    setData({ ...data });\n  }\n\n  const upsert = (path: string, obj: any, isSet: boolean) => {\n    let mPath = path.startsWith('.') ? path.slice(1) : path;\n    let mData = cloneDeep(data);\n    if (isSet) {\n      set(mData, mPath, obj);\n    } else {\n      unset(mData, mPath);\n      mData = pruneEmpty(mData);\n    }\n    setData(mData);\n  }\n\n  return (\n    <div className=\"App\">\n      <RuleGroup\n        data={data}\n        level={1}\n        action={upsert}\n        onConditionChange={changeKey}\n        path=\"\"\n        />\n        <br />\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}